import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import CategoryBubbles from './CategoryBubbles';
import InteractiveHeatMap from './InteractiveHeatMap';
import AdvancedSearch, { SearchFilters } from './AdvancedSearch';
import DayMapModal from './DayMapModal';
import { eventService } from '../services/api';
import { Event } from '../types/Event';
import { CategoryBubble } from '../types/CategoryBubble';
import { 
  CalendarIcon, 
  ClockIcon, 
  AcademicCapIcon, 
  BuildingOfficeIcon,
  MapPinIcon,
  UsersIcon
} from '@heroicons/react/24/outline';

const Dashboard: React.FC = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [stats, setStats] = useState({
    total: 0,
    upcoming: 0,
    academic: 0,
    government: 0,
    today: 0,
    thisWeek: 0,
    thisMonth: 0
  });
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [searchFilters, setSearchFilters] = useState<SearchFilters | null>(null);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const data = await eventService.getEvents();
        setEvents(data);
        
        // Calculate stats
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const weekStart = new Date(today);
        weekStart.setDate(today.getDate() - today.getDay());
        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
        
        const stats = {
          total: data.length,
          upcoming: data.filter(e => new Date(e.start_date) > now).length,
          academic: data.filter(e => e.event_type === 'academic').length,
          government: data.filter(e => e.event_type === 'government').length,
          today: data.filter(e => {
            const eventDate = new Date(e.start_date);
            return eventDate >= today && eventDate < new Date(today.getTime() + 24 * 60 * 60 * 1000);
          }).length,
          thisWeek: data.filter(e => {
            const eventDate = new Date(e.start_date);
            return eventDate >= weekStart && eventDate < new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000);
          }).length,
          thisMonth: data.filter(e => {
            const eventDate = new Date(e.start_date);
            return eventDate >= monthStart && eventDate < new Date(monthStart.getTime() + 32 * 24 * 60 * 60 * 1000);
          }).length
        };
        setStats(stats);
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []);

  const getEventTypeStats = () => {
    const typeCounts = events.reduce((acc, event) => {
      acc[event.event_type] = (acc[event.event_type] || 0) + 1;
      return acc;
    }, {} as { [key: string]: number });

    const total = events.length;
    return Object.entries(typeCounts).map(([type, count]) => ({
      type: type.charAt(0).toUpperCase() + type.slice(1),
      count,
      percentage: total > 0 ? Math.round((count / total) * 100) : 0,
      color: type === 'academic' ? 'bg-blue-500' : 
             type === 'government' ? 'bg-green-500' : 
             type === 'holiday' ? 'bg-purple-500' : 'bg-gray-500'
    }));
  };

  const handleCategorySelect = (category: CategoryBubble) => {
    setSelectedCategory(selectedCategory === category.id ? '' : category.id);
  };

  const handleDateSelect = (date: Date) => {
    setSelectedDate(date);
    setIsModalOpen(true);
  };

  const handleAdvancedSearch = (filters: SearchFilters) => {
    try {
      setSearchFilters(filters);
      console.log('Advanced search filters:', filters);
    } catch (error) {
      console.error('Error in advanced search:', error);
    }
  };

  const categories: CategoryBubble[] = [
    {
      id: 'university',
      name: 'University Events',
      icon: '📚',
      color: '#3b82f6',
      bgColor: '#dbeafe',
      description: 'Academic lectures, research symposiums, and campus activities',
      eventTypes: ['academic']
    },
    {
      id: 'government',
      name: 'Government Meetings',
      icon: '🏛',
      color: '#059669',
      bgColor: '#d1fae5',
      description: 'City council meetings, public hearings, and government forums',
      eventTypes: ['government']
    },
    {
      id: 'school-holidays',
      name: 'School Holidays',
      icon: '📅',
      color: '#7c3aed',
      bgColor: '#f3e8ff',
      description: 'School breaks, holidays, and academic calendar events',
      eventTypes: ['holiday']
    },
    {
      id: 'official-holidays',
      name: 'Official Holidays',
      icon: '🎊',
      color: '#dc2626',
      bgColor: '#fee2e2',
      description: 'Federal and state holidays, observances',
      eventTypes: ['holiday']
    },
    {
      id: 'workshops',
      name: 'Workshops & Training',
      icon: '⚙️',
      color: '#ea580c',
      bgColor: '#fed7aa',
      description: 'Professional development and skill-building sessions',
      eventTypes: ['academic']
    },
    {
      id: 'tech',
      name: 'Tech Events',
      icon: '⚡',
      color: '#0891b2',
      bgColor: '#cffafe',
      description: 'Technology conferences, hackathons, and innovation events',
      eventTypes: ['academic']
    },
    {
      id: 'community',
      name: 'Community Events',
      icon: '👥',
      color: '#059669',
      bgColor: '#d1fae5',
      description: 'Local community gatherings and civic engagement',
      eventTypes: ['government']
    }
  ];

  const handleClearSearch = () => {
    try {
      setSearchFilters(null);
    } catch (error) {
      console.error('Error clearing search:', error);
    }
  };

  const filteredEvents = events.filter(event => {
    if (selectedCategory) {
      const category = categories.find(c => c.id === selectedCategory);
      if (category && !category.eventTypes.includes(event.event_type)) {
        return false;
      }
    }
    if (selectedDate) {
      const eventDate = new Date(event.start_date);
      return eventDate.toDateString() === selectedDate.toDateString();
    }
    return true;
  });

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="text-center">
            <h1 className="text-3xl md:text-4xl font-bold mb-6">
              EventPulse NC
            </h1>
            <p className="text-xl md:text-2xl mb-8 text-blue-100">
              Your comprehensive guide to events across North Carolina
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link
                to="/#/events"
                className="bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors"
              >
                Browse All Events
              </Link>
              <Link
                to="/#/calendar"
                className="bg-transparent border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors"
              >
                View Calendar
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content Container */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
        {/* Advanced Search Section */}
        <AdvancedSearch 
          onSearch={handleAdvancedSearch}
          onClear={handleClearSearch}
        />

        {/* Category Bubbles */}
        <CategoryBubbles
          onCategorySelect={handleCategorySelect}
          selectedCategory={selectedCategory}
        />

        {/* Interactive Heat Map */}
        <InteractiveHeatMap 
          selectedDate={selectedDate}
          onDateSelect={handleDateSelect}
        />

        {/* Enhanced Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <CalendarIcon className="h-1 w-1 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Events</p>
                <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <ClockIcon className="h-1 w-1 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Upcoming</p>
                <p className="text-2xl font-bold text-gray-900">{stats.upcoming}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <AcademicCapIcon className="h-1 w-1 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Academic</p>
                <p className="text-2xl font-bold text-gray-900">{stats.academic}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <BuildingOfficeIcon className="h-1 w-1 text-purple-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Government</p>
                <p className="text-2xl font-bold text-gray-900">{stats.government}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Time-based Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.today}</div>
              <div className="text-sm text-gray-600">Today</div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{stats.thisWeek}</div>
              <div className="text-sm text-gray-600">This Week</div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">{stats.thisMonth}</div>
              <div className="text-sm text-gray-600">This Month</div>
            </div>
          </div>
        </div>

        {/* Event Type Distribution */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Event Type Distribution</h3>
          <div className="space-y-3">
            {getEventTypeStats().map((item) => (
              <div key={item.type} className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className={`w-4 h-4 rounded-full ${item.color} mr-3`}></div>
                  <span className="text-sm font-medium text-gray-700">{item.type}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-600">{item.count} events</span>
                  <span className="text-sm text-gray-500">({item.percentage}%)</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Link
            to="/#/events"
            className="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow"
          >
            <div className="flex items-center">
              <CalendarIcon className="h-1 w-1 text-blue-600" />
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">Browse All Events</h3>
                <p className="text-gray-600">View and filter all available events</p>
              </div>
            </div>
          </Link>

          <Link
            to="/#/calendar"
            className="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow"
          >
            <div className="flex items-center">
              <CalendarIcon className="h-1 w-1 text-green-600" />
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">Calendar View</h3>
                <p className="text-gray-600">See events in calendar format</p>
              </div>
            </div>
          </Link>

          <Link
            to="/#/map"
            className="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow"
          >
            <div className="flex items-center">
              <MapPinIcon className="h-1 w-1 text-purple-600" />
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">View on Map</h3>
                <p className="text-gray-600">See events on an interactive map</p>
              </div>
            </div>
          </Link>
        </div>

        {/* Mobile-Friendly Features */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6">
          <div className="flex items-center mb-4">
            <UsersIcon className="h-1 w-1 text-blue-600 mr-3" />
            <h3 className="text-lg font-semibold text-gray-900">Smart, Simple, Personal</h3>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-700">
            <div className="flex items-start space-x-2">
              <span className="text-green-600">✓</span>
              <span><strong>Bubble categories</strong> help you instantly find what you care about - click "Workshops" to see every hands-on learning opportunity across the state</span>
            </div>
            <div className="flex items-start space-x-2">
              <span className="text-green-600">✓</span>
              <span><strong>Right-click any day</strong> to see a beautiful map of events happening that day</span>
            </div>
            <div className="flex items-start space-x-2">
              <span className="text-green-600">✓</span>
              <span><strong>Mobile-friendly</strong> so you can check what's happening while you're out and about</span>
            </div>
            <div className="flex items-start space-x-2">
              <span className="text-green-600">✓</span>
              <span><strong>Always up-to-date</strong> with fresh event data pulled automatically from across NC</span>
            </div>
          </div>
          <div className="mt-4 p-4 bg-white rounded-lg">
            <p className="text-sm text-gray-600 italic">
              Stop juggling dozens of different calendars. EventPulse NC puts the entire state's schedule at your fingertips - because life's too short to miss the good stuff happening around you.
            </p>
          </div>
        </div>

        {/* Auto-Update Status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Data Freshness</h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Last Scraper Run</span>
                <span className="text-sm font-medium text-green-600">Just now</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Next Update</span>
                <span className="text-sm font-medium text-gray-900">6 hours</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Success Rate</span>
                <span className="text-sm font-medium text-green-600">95%</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Active Sources</span>
                <span className="text-sm font-medium text-blue-600">5/6</span>
              </div>
            </div>
          </div>
        </div>

        {/* Perfect For Section */}
        <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6">
          <h3 className="text-xl font-semibold text-gray-900 mb-6 text-center">
            Perfect For:
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <div className="flex items-start space-x-3">
                <div className="text-2xl">👨‍👩‍👧‍👦</div>
                <div>
                  <h4 className="font-semibold text-gray-900">Parents</h4>
                  <p className="text-sm text-gray-600">Planning around school breaks and university schedules</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <div className="flex items-start space-x-3">
                <div className="text-2xl">💼</div>
                <div>
                  <h4 className="font-semibold text-gray-900">Professionals</h4>
                  <p className="text-sm text-gray-600">Finding networking events and industry conferences</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <div className="flex items-start space-x-3">
                <div className="text-2xl">🎓</div>
                <div>
                  <h4 className="font-semibold text-gray-900">Students</h4>
                  <p className="text-sm text-gray-600">Discovering workshops, lectures, and academic events</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <div className="flex items-start space-x-3">
                <div className="text-sm">🏛️</div>
                <div>
                  <h4 className="font-semibold text-gray-900">Engaged Citizens</h4>
                  <p className="text-sm text-gray-600">Staying informed about government meetings and public hearings</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <div className="flex items-start space-x-3">
                <div className="text-sm">🌟</div>
                <div>
                  <h4 className="font-semibold text-gray-900">Everyone</h4>
                  <p className="text-sm text-gray-600">Who wants to make the most of living in North Carolina</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <div className="flex items-start space-x-3">
                <div className="text-sm">🚀</div>
                <div>
                  <h4 className="font-semibold text-gray-900">Life Enthusiasts</h4>
                  <p className="text-sm text-gray-600">Because life's too short to miss the good stuff happening around you</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Today's Events */}
        {filteredEvents.length > 0 && (
          <div className="bg-white rounded-lg shadow">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Today's Events</h2>
            </div>
            <div className="divide-y divide-gray-200">
              {filteredEvents.map((event) => (
                <div key={event.id} className="px-6 py-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">{event.title}</h3>
                      <p className="text-sm text-gray-600">{event.location_name}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium text-gray-900">
                        {new Date(event.start_date).toLocaleTimeString()}
                      </p>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        event.event_type === 'academic' ? 'bg-blue-100 text-blue-800' :
                        event.event_type === 'government' ? 'bg-green-100 text-green-800' :
                        event.event_type === 'city' ? 'bg-purple-100 text-purple-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {event.event_type}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Upcoming Events */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">Upcoming Events</h2>
          </div>
          <div className="divide-y divide-gray-200">
            {events
              .filter(event => new Date(event.start_date) > new Date())
              .sort((a, b) => new Date(a.start_date).getTime() - new Date(b.start_date).getTime())
              .slice(0, 5)
              .map((event) => (
                <div key={event.id} className="px-6 py-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">{event.title}</h3>
                      <p className="text-sm text-gray-600">{event.location_name}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium text-gray-900">
                        {new Date(event.start_date).toLocaleDateString()}
                      </p>
                      <p className="text-sm text-gray-600">
                        {new Date(event.start_date).toLocaleTimeString()}
                      </p>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        event.event_type === 'academic' ? 'bg-blue-100 text-blue-800' :
                        event.event_type === 'government' ? 'bg-green-100 text-green-800' :
                        event.event_type === 'city' ? 'bg-purple-100 text-purple-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {event.event_type}
                      </span>
                    </div>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </div>
      <DayMapModal 
          isOpen={isModalOpen} 
          onClose={() => setIsModalOpen(false)} 
          selectedDate={selectedDate || null} 
          events={events}
        />
    </div>
  );
};

export default Dashboard; 